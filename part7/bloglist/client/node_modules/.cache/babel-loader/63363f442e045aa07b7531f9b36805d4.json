{"ast":null,"code":"var _jsxFileName = \"/goinfre/ismelich/Projects/fullStackOpen/part7/bloglist/client/src/components/Togglable.js\";\nimport React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nconst Togglable = forwardRef((props, ref) => {\n  const [visibility, setVisibility] = useState(false);\n  const hideWhenVisible = {\n    display: visibility ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visibility ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisibility(!visibility);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: hideWhenVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => toggleVisibility(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }, props.label)), /*#__PURE__*/React.createElement(\"div\", {\n    style: showWhenVisible,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, props.children, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => toggleVisibility(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 9\n    }\n  }, \"cancel\")));\n});\nTogglable.displayName = 'Togglable';\nTogglable.propTypes = {\n  label: PropTypes.string.isRequired\n};\nexport default Togglable;","map":{"version":3,"sources":["/goinfre/ismelich/Projects/fullStackOpen/part7/bloglist/client/src/components/Togglable.js"],"names":["React","useState","forwardRef","useImperativeHandle","PropTypes","Togglable","props","ref","visibility","setVisibility","hideWhenVisible","display","showWhenVisible","toggleVisibility","label","children","displayName","propTypes","string","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,UAA1B,EAAsCC,mBAAtC,QAAiE,OAAjE;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,MAAMC,SAAS,GAAGH,UAAU,CAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAC3C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BR,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,UAAU,GAAG,MAAH,GAAY;AAAjC,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,UAAU,GAAG,EAAH,GAAQ;AAA7B,GAAxB;;AAEA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,GAFD;;AAIAL,EAAAA,mBAAmB,CAACI,GAAD,EAAM,MAAM;AAC7B,WAAO;AAAEM,MAAAA;AAAF,KAAP;AACD,GAFkB,CAAnB;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,KAAK,EAAEH,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAE,MAAMG,gBAAgB,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA4CP,KAAK,CAACQ,KAAlD,CADF,CADF,eAIE;AAAK,IAAA,KAAK,EAAEF,eAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,KAAK,CAACS,QADT,eAEE;AAAQ,IAAA,OAAO,EAAE,MAAMF,gBAAgB,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,CAJF,CADF;AAWD,CAzB2B,CAA5B;AA2BAR,SAAS,CAACW,WAAV,GAAwB,WAAxB;AAEAX,SAAS,CAACY,SAAV,GAAsB;AACpBH,EAAAA,KAAK,EAAEV,SAAS,CAACc,MAAV,CAAiBC;AADJ,CAAtB;AAIA,eAAed,SAAf","sourcesContent":["import React, { useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visibility, setVisibility] = useState(false);\n\n  const hideWhenVisible = { display: visibility ? 'none' : '' };\n  const showWhenVisible = { display: visibility ? '' : 'none' };\n\n  const toggleVisibility = () => {\n    setVisibility(!visibility);\n  };\n\n  useImperativeHandle(ref, () => {\n    return { toggleVisibility };\n  });\n\n  return (\n    <div>\n      <div style={hideWhenVisible}>\n        <button onClick={() => toggleVisibility()}>{props.label}</button>\n      </div>\n      <div style={showWhenVisible}>\n        {props.children}\n        <button onClick={() => toggleVisibility()}>cancel</button>\n      </div>\n    </div>\n  );\n});\n\nTogglable.displayName = 'Togglable';\n\nTogglable.propTypes = {\n  label: PropTypes.string.isRequired\n};\n\nexport default Togglable;\n"]},"metadata":{},"sourceType":"module"}